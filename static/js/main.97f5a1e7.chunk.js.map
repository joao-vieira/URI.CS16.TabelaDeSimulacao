{"version":3,"sources":["App.js","styles/global.js","index.js"],"names":["App","useState","time","setTime","entry","setEntry","service","setService","timeEntries","setTimeEntries","timeServices","setTimeServices","rows","setRows","totals","setTotals","showResult","setShowResult","sortNumber","a","b","isInteger","value","number","parseInt","Number","error","getRandomNumber","array","Math","floor","random","length","addEntry","includes","times","sort","addService","Header","align","H3","type","hasExtraSpace","Row","alignItems","className","Col","width","offset","Input","label","autoFocus","onChange","e","target","List","block","pill","color","onClick","alert","prevIndex","counter","records","randomTEC","randomTS","push","num","entryInClock","startService","queueTime","final","timeSystem","freeTime","newTEC","newTS","newQueueTime","arr","results","serviceTime","reduce","acc","cur","clientTime","clientsOnQueue","filter","elm","defineTotals","cards","deck","title","InputGroup","onKeyPress","key","InputGroupAppend","icon","center","map","item","i","ColHeader","Body","row","style","fontWeight","fontSize","toFixed","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97f5a1e7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Container,\n  Site,\n  Header,\n  Grid,\n  Card,\n  Form,\n  Button,\n  Text,\n  Table,\n  Alert,\n} from 'tabler-react';\n\nfunction App() {\n  const [time, setTime] = useState(180);\n  const [entry, setEntry] = useState(0);\n  const [service, setService] = useState(0);\n  const [timeEntries, setTimeEntries] = useState([10, 12, 15]);\n  const [timeServices, setTimeServices] = useState([9, 10, 11]);\n  const [rows, setRows] = useState([]);\n  const [totals, setTotals] = useState({});\n  const [showResult, setShowResult] = useState(false);\n\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  function isInteger(value) {\n    try {\n      const number = parseInt(value, 10);\n      if (Number.isInteger(number)) {\n        return true;\n      }\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  function getRandomNumber(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  function addEntry() {\n    if (!isInteger(entry)) return;\n    if (timeEntries.includes(parseInt(entry, 10))) return;\n\n    setTimeEntries((times) => [...times, parseInt(entry, 10)].sort(sortNumber));\n    setEntry(0);\n  }\n\n  function addService() {\n    if (!isInteger(service)) return;\n    if (timeServices.includes(parseInt(service, 10))) return;\n\n    setTimeServices((times) =>\n      [...times, parseInt(service, 10)].sort(sortNumber)\n    );\n    setService(0);\n  }\n\n  function defineTotals(arr) {\n    const results = {\n      serviceTime: arr.reduce((acc, cur) => acc + cur.service, 0),\n      queueTime: arr.reduce((acc, cur) => acc + cur.queueTime, 0),\n      clientTime: arr.reduce((acc, cur) => acc + cur.timeSystem, 0),\n      freeTime: arr.reduce((acc, cur) => acc + cur.freeTime, 0),\n      clientsOnQueue: arr.filter((elm) => elm.queueTime > 0).length || 0,\n    };\n\n    setTotals(results);\n  }\n\n  function calculate() {\n    if (!Number.isInteger(parseInt(time, 10))) {\n      alert('O tempo deve ser informado como um número inteiro!');\n      return;\n    }\n\n    if (timeEntries.length <= 1 || timeServices.length <= 1) {\n      alert('TEC e TS devem possuir, ao menos, 2 opções!');\n      return;\n    }\n\n    let prevIndex = 0;\n    let counter = 1;\n    const records = [];\n\n    const randomTEC = getRandomNumber(timeEntries);\n    const randomTS = getRandomNumber(timeServices);\n    const queueTime = 0;\n    records.push({\n      num: counter,\n      entry: randomTEC,\n      entryInClock: randomTEC,\n      service: randomTS,\n      startService: randomTEC,\n      queueTime,\n      final: randomTS + randomTEC,\n      timeSystem: randomTS + queueTime,\n      freeTime: randomTEC,\n    });\n\n    while (true) {\n      const num = counter + 1;\n      const newTEC = getRandomNumber(timeEntries);\n      const newTS = getRandomNumber(timeServices);\n      const entryInClock = records[prevIndex].entryInClock + newTEC;\n      const newQueueTime =\n        records[prevIndex].final >= entryInClock\n          ? records[prevIndex].final - entryInClock\n          : 0;\n      const startService = entryInClock + newQueueTime;\n      const final = newTS + startService;\n      const timeSystem = newTS + newQueueTime;\n      const freeTime =\n        records[prevIndex].final < entryInClock\n          ? entryInClock - records[prevIndex].final\n          : 0;\n\n      if (entryInClock > time) {\n        break;\n      } else {\n        records.push({\n          num,\n          entry: newTEC,\n          entryInClock,\n          service: newTS,\n          startService,\n          queueTime: newQueueTime,\n          final,\n          timeSystem,\n          freeTime,\n        });\n\n        counter += 1;\n        prevIndex += 1;\n      }\n    }\n\n    defineTotals(records);\n    setRows(records);\n    setShowResult(true);\n  }\n\n  function clear() {\n    setTime(0);\n    setEntry(0);\n    setService(0);\n    setTimeEntries([]);\n    setTimeServices([]);\n    setRows([]);\n    setShowResult(false);\n  }\n\n  return (\n    <>\n      <Site.Header align=\"center\">\n        <Header.H3>TABELA DE SIMULAÇÃO - {time} minutos</Header.H3>\n      </Site.Header>\n      <Container>\n        <Alert type=\"primary\" hasExtraSpace>\n          <strong>Recomendações:</strong> são permitidos apenas números inteiros\n          e únicos. Portanto, insira apenas valores númericos e não os repita!\n        </Alert>\n        <Grid.Row alignItems=\"center\" className=\"time-and-button\">\n          <Grid.Col width={4} offset={2}>\n            <Form.Input\n              label=\"INFORME O TEMPO DA SIMULAÇÃO\"\n              autoFocus\n              value={time}\n              onChange={(e) => setTime(e.target.value)}\n            />\n          </Grid.Col>\n          <Grid.Col width={4}>\n            <Button.List>\n              <Button block pill color=\"primary\" onClick={calculate}>\n                SIMULAR\n              </Button>\n              <Button block pill color=\"warning\" onClick={clear}>\n                LIMPAR\n              </Button>\n            </Button.List>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row cards deck>\n          <Grid.Col>\n            <Card title=\"Tempo Entre Chegadas (TEC)\">\n              <Container className=\"spacing\">\n                <Form.InputGroup>\n                  <Form.Input\n                    value={entry}\n                    onChange={(e) => setEntry(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        addEntry();\n                      }\n                    }}\n                  />\n                  <Form.InputGroupAppend>\n                    <Button icon=\"plus\" color=\"primary\" onClick={addEntry} />\n                  </Form.InputGroupAppend>\n                </Form.InputGroup>\n                <hr />\n                <Text color=\"success\" center=\"true\" className=\"options\">\n                  {timeEntries.map((item, i) => (\n                    <span key={item}>{i === 0 ? item : ` | ${item}`}</span>\n                  ))}\n                </Text>\n              </Container>\n            </Card>\n          </Grid.Col>\n          <Grid.Col>\n            <Card title=\"Tempo de Serviço (TS)\">\n              <Container className=\"spacing\">\n                <Form.InputGroup>\n                  <Form.Input\n                    value={service}\n                    onChange={(e) => setService(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        addService();\n                      }\n                    }}\n                  />\n                  <Form.InputGroupAppend>\n                    <Button icon=\"plus\" color=\"primary\" onClick={addService} />\n                  </Form.InputGroupAppend>\n                </Form.InputGroup>\n                <hr />\n                <Text color=\"success\" center=\"true\" className=\"options\">\n                  {timeServices.map((item, i) => (\n                    <span key={item}>{i === 0 ? item : ` | ${item}`}</span>\n                  ))}\n                </Text>\n              </Container>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n        {showResult && (\n          <>\n            <Grid.Row alignItems=\"center\">\n              <Table>\n                <Table.Header>\n                  <Table.ColHeader>Cliente</Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo desde a última chegada (minutos)\n                  </Table.ColHeader>\n                  <Table.ColHeader>Tempo de Chegada no Relógio</Table.ColHeader>\n                  <Table.ColHeader>Tempo de Serviço (minutos)</Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo de Início do Serviço no Relógio\n                  </Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo do Cliente na Fila (minutos)\n                  </Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo Final do Serviço no Relógio\n                  </Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo do Cliente no Sistema (minutos)\n                  </Table.ColHeader>\n                  <Table.ColHeader>\n                    Tempo Livre do Operador (minutos)\n                  </Table.ColHeader>\n                </Table.Header>\n                <Table.Body>\n                  {rows.map((row) => (\n                    <Table.Row key={row.num}>\n                      <Table.Col>{row.num}</Table.Col>\n                      <Table.Col>{row.entry}</Table.Col>\n                      <Table.Col>{row.entryInClock}</Table.Col>\n                      <Table.Col>{row.service}</Table.Col>\n                      <Table.Col>{row.startService}</Table.Col>\n                      <Table.Col>{row.queueTime}</Table.Col>\n                      <Table.Col>{row.final}</Table.Col>\n                      <Table.Col>{row.timeSystem}</Table.Col>\n                      <Table.Col>{row.freeTime}</Table.Col>\n                    </Table.Row>\n                  ))}\n                  <Table.Row key=\"totals\">\n                    <Table.Col />\n                    <Table.Col />\n                    <Table.Col />\n                    <Table.Col>\n                      <span style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                        {totals.serviceTime}\n                      </span>\n                    </Table.Col>\n                    <Table.Col />\n                    <Table.Col>\n                      <span style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                        {totals.queueTime}\n                      </span>\n                    </Table.Col>\n                    <Table.Col />\n                    <Table.Col>\n                      <span style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                        {totals.clientTime}\n                      </span>\n                    </Table.Col>\n                    <Table.Col>\n                      <span style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                        {totals.freeTime}\n                      </span>\n                    </Table.Col>\n                  </Table.Row>\n                </Table.Body>\n              </Table>\n            </Grid.Row>\n            <Grid.Row cards deck>\n              <Card title=\"RESULTADOS\">\n                <Container className=\"spacing\">\n                  <Grid.Row>\n                    <Grid.Col>\n                      Tempo médio de espera na fila{' '}\n                      <Text className=\"bold\" color=\"primary\">\n                        {`${(totals.queueTime / rows.length).toFixed(\n                          2\n                        )} minutos`}\n                      </Text>\n                    </Grid.Col>\n                    <Grid.Col>\n                      Probabilidade de um cliente esperar na fila{' '}\n                      <Text className=\"bold\" color=\"primary\">\n                        {`${(totals.clientsOnQueue / rows.length).toFixed(\n                          2\n                        )} %`}\n                      </Text>\n                    </Grid.Col>\n                    <Grid.Col>\n                      Probabilidade do operador livre{' '}\n                      <Text className=\"bold\" color=\"primary\">\n                        {`${(\n                          totals.freeTime / rows[rows.length - 1].final\n                        ).toFixed(2)} %`}\n                      </Text>\n                    </Grid.Col>\n                    <Grid.Col>\n                      Tempo médio de serviço{' '}\n                      <Text className=\"bold\" color=\"primary\">\n                        {`${(totals.serviceTime / rows.length).toFixed(\n                          2\n                        )} minutos`}\n                      </Text>\n                    </Grid.Col>\n                    <Grid.Col>\n                      Tempo médio despendido no sistema{' '}\n                      <Text className=\"bold\" color=\"primary\">\n                        {`${(totals.clientTime / rows.length).toFixed(\n                          2\n                        )} minutos`}\n                      </Text>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Container>\n              </Card>\n            </Grid.Row>\n          </>\n        )}\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: none;\n    box-sizing: border-box;\n  }\n\n  html {\n    min-height: 100%;\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'tabler-react/dist/Tabler.css';\nimport GlobalStyle from './styles/global';\nimport './styles/custom.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}